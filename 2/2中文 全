#include <stdio.h>
#include <stdlib.h>
#include <memory.h>
#include <unistd.h>
#include <fcntl.h>

#define int long long // 64 bit 電腦

int *e;  // current position in emitted code
int debug = 1;

// opcodes (機器碼的 op)
enum { LLA ,IMM ,JMP ,JSR ,BZ  ,BNZ ,ENT ,ADJ ,LEV ,LI  ,LC  ,SI  ,SC  ,PSH ,
       OR  ,XOR ,AND ,EQ  ,NE  ,LT  ,GT  ,LE  ,GE  ,SHL ,SHR ,ADD ,SUB ,MUL ,DIV ,MOD ,
       OPEN,READ,CLOS,PRTF,MALC,FREE,MSET,MCMP,EXIT };

int *loc; // 用來標註位置

int run(int *pc, int *bp, int *sp) {
  int a, cycle;
  int i, *t;
  cycle = 0;
  while (1) {
    i = *pc++; ++cycle;
    if (debug) {
      printf("%d> %.4s", cycle,
        &"LLA ,IMM ,JMP ,JSR ,BZ  ,BNZ ,ENT ,ADJ ,LEV ,LI  ,LC  ,SI  ,SC  ,PSH ,"
         "OR  ,XOR ,AND ,EQ  ,NE  ,LT  ,GT  ,LE  ,GE  ,SHL ,SHR ,ADD ,SUB ,MUL ,DIV ,MOD ,"
         "OPEN,READ,CLOS,PRTF,MALC,FREE,MSET,MCMP,EXIT,"[i * 5]);
      if (i <= ADJ) printf(" %d\n", *pc); else printf("\n");
    }
    if      (i == LLA) a = (int)(bp + *pc++);
    else if (i == IMM) a = *pc++;
    else if (i == JMP) pc = (int *)*pc;
    else if (i == JSR) { *--sp = (int)(pc + 1); pc = (int *)*pc; }
    else if (i == BZ)  pc = a ? pc + 1 : (int *)*pc;
    else if (i == BNZ) pc = a ? (int *)*pc : pc + 1;
    else if (i == ENT) { *--sp = (int)bp; bp = sp; sp = sp - *pc++; }
    else if (i == ADJ) sp = sp + *pc++;
    else if (i == LEV) { sp = bp; bp = (int *)*sp++; pc = (int *)*sp++; }
    else if (i == LI)  a = *(int *)a;
    else if (i == LC)  a = *(char *)a;
    else if (i == SI)  *(int *)*sp++ = a;
    else if (i == SC)  a = *(char *)*sp++ = a;
    else if (i == PSH) *--sp = a;
    else if (i == ADD) a = *sp++ +  a;
    else if (i == SUB) a = *sp++ -  a;
    else if (i == MUL) a = *sp++ *  a;
    else if (i == DIV) a = *sp++ /  a;
    else if (i == MOD) a = *sp++ %  a;
    else if (i == EXIT) { printf("exit(%d) cycle = %d\n", *sp, cycle); return *sp; }
    else { printf("unknown instruction = %d! cycle = %d\n", i, cycle); return -1; }
  }
}

int main() {
  int *pc, *bp, *sp, poolsz, *t;

  poolsz = 256*1024; // arbitrary size
  if (!(e = malloc(poolsz))) { printf("could not malloc(%d) text area\n", poolsz); return -1; }
  if (!(sp = malloc(poolsz))) { printf("could not malloc(%d) stack area\n", poolsz); return -1; }
  
  memset(e, 0, poolsz);

  // power2 function
 // 1: int power2(int n) {
fib = e;
*e++ = ENT; *e++ = 0;  // 進入 power2 函數

// 2: int r, i;
*e++ = LLA; *e++ = 2;  // r
*e++ = IMM; *e++ = 1;  // r = 1
*e++ = PSH;            // 將 r 推入堆疊

*e++ = LLA; *e++ = 3;  // i
*e++ = IMM; *e++ = 1;  // i = 1
*e++ = PSH;            // 將 i 推入堆疊

// 3: r = 1;
*e++ = IMM; *e++ = 1;  // r = 1
*e++ = PSH;            // 將 r 推入堆疊

// 4: i = 1;
*e++ = IMM; *e++ = 1;  // i = 1
*e++ = PSH;            // 將 i 推入堆疊

// 5: while (i <= n) {
*e++ = LLA; *e++ = 3;  // 載入 i
*e++ = LI;             // 讀取 i 的值
*e++ = PSH;            // 將 i 推入堆疊
*e++ = LLA; *e++ = 2;  // 載入 n
*e++ = LI;             // 讀取 n 的值
*e++ = LEV;            // 比較 i <= n
*e++ = BZ; loc = e; *e++ = 0;  // 若 i > n，跳出循環

// 6: r = r * 2;
*e++ = LLA; *e++ = 1;  // 載入 r
*e++ = LI;             // 讀取 r 的值
*e++ = PSH;            // 將 r 推入堆疊
*e++ = IMM; *e++ = 2;  // 載入常數 2
*e++ = MUL;            // r = r * 2

// 7: i++;
*e++ = LLA; *e++ = 3;  // 載入 i
*e++ = LI;             // 讀取 i 的值
*e++ = IMM; *e++ = 1;  // 載入常數 1
*e++ = ADD;            // i = i + 1
*e++ = PSH;            // 將更新後的 i 推入堆疊

// 8: }
*e++ = LEV;            // 結束循環，離開函數

// 9: return r;
*e++ = LLA; *e++ = 1;  // 載入 r
*e++ = LI;             // 讀取 r 的值
*e++ = PSH;            // 將 r 推入堆疊
*e++ = PRTF;           // 輸出 r 的值
*e++ = ADJ; *e++ = 1;  // 調整堆疊並返回

// 10: int main() {
pc = e;
*e++ = ENT; *e++ = 0;  // 進入 main 函數

// 11: printf("power2(3)=%d\n", power2(3));
*e++ = IMM; *e++ = (int) "power2(3)=%d\n"; // 載入格式字串
*e++ = PSH;            // 推入堆疊
*e++ = IMM; *e++ = 3;  // 載入參數 3 給 power2
*e++ = PSH;            // 推入堆疊
*e++ = JSR; *e++ = (int) e;  // 跳轉到 power2 函數
*e++ = ADJ; *e++ = 1;  // 調整堆疊
*e++ = PRTF;           // 輸出結果
*e++ = ADJ; *e++ = 2;  // 調整堆疊

// 12: }
*e++ = LEV;  // 結束 main 函數

  // setup stack
  bp = sp = (int *)((int)sp + poolsz);
  *--sp = EXIT; // call exit if main returns
  *--sp = PSH; t = sp;
  *--sp = (int)t;
  return run(pc, bp, sp);
}