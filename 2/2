#include <stdio.h>
#include <stdlib.h>
#include <memory.h>
#include <unistd.h>
#include <fcntl.h>

#define int long long // 64 bit 電腦

int *e;  // current position in emitted code
int debug = 1;

// opcodes (機器碼的 op)
enum { LLA ,IMM ,JMP ,JSR ,BZ  ,BNZ ,ENT ,ADJ ,LEV ,LI  ,LC  ,SI  ,SC  ,PSH ,
       OR  ,XOR ,AND ,EQ  ,NE  ,LT  ,GT  ,LE  ,GE  ,SHL ,SHR ,ADD ,SUB ,MUL ,DIV ,MOD ,
       OPEN,READ,CLOS,PRTF,MALC,FREE,MSET,MCMP,EXIT };

int *loc; // 用來標註位置

int run(int *pc, int *bp, int *sp) {
  int a, cycle;
  int i, *t;
  cycle = 0;
  while (1) {
    i = *pc++; ++cycle;
    if (debug) {
      printf("%d> %.4s", cycle,
        &"LLA ,IMM ,JMP ,JSR ,BZ  ,BNZ ,ENT ,ADJ ,LEV ,LI  ,LC  ,SI  ,SC  ,PSH ,"
         "OR  ,XOR ,AND ,EQ  ,NE  ,LT  ,GT  ,LE  ,GE  ,SHL ,SHR ,ADD ,SUB ,MUL ,DIV ,MOD ,"
         "OPEN,READ,CLOS,PRTF,MALC,FREE,MSET,MCMP,EXIT,"[i * 5]);
      if (i <= ADJ) printf(" %d\n", *pc); else printf("\n");
    }
    if      (i == LLA) a = (int)(bp + *pc++);
    else if (i == IMM) a = *pc++;
    else if (i == JMP) pc = (int *)*pc;
    else if (i == JSR) { *--sp = (int)(pc + 1); pc = (int *)*pc; }
    else if (i == BZ)  pc = a ? pc + 1 : (int *)*pc;
    else if (i == BNZ) pc = a ? (int *)*pc : pc + 1;
    else if (i == ENT) { *--sp = (int)bp; bp = sp; sp = sp - *pc++; }
    else if (i == ADJ) sp = sp + *pc++;
    else if (i == LEV) { sp = bp; bp = (int *)*sp++; pc = (int *)*sp++; }
    else if (i == LI)  a = *(int *)a;
    else if (i == LC)  a = *(char *)a;
    else if (i == SI)  *(int *)*sp++ = a;
    else if (i == SC)  a = *(char *)*sp++ = a;
    else if (i == PSH) *--sp = a;
    else if (i == ADD) a = *sp++ +  a;
    else if (i == SUB) a = *sp++ -  a;
    else if (i == MUL) a = *sp++ *  a;
    else if (i == DIV) a = *sp++ /  a;
    else if (i == MOD) a = *sp++ %  a;
    else if (i == EXIT) { printf("exit(%d) cycle = %d\n", *sp, cycle); return *sp; }
    else { printf("unknown instruction = %d! cycle = %d\n", i, cycle); return -1; }
  }
}

int main() {
  int *pc, *bp, *sp, poolsz, *t;

  poolsz = 256*1024; // arbitrary size
  if (!(e = malloc(poolsz))) { printf("could not malloc(%d) text area\n", poolsz); return -1; }
  if (!(sp = malloc(poolsz))) { printf("could not malloc(%d) stack area\n", poolsz); return -1; }
  
  memset(e, 0, poolsz);

  // power2 function
  // 1: int power2(int n) {
	fib = e;
	*e++ = ENT; *e++ = 0;
	
	// 2: int r, i;
	*e++ = LLA; *e++ = 2;  // r
	*e++ = IMM; *e++ = 1;  // r = 1
	*e++ = PSH;            // Push r onto stack
	
	*e++ = LLA; *e++ = 3;  // i
	*e++ = IMM; *e++ = 1;  // i = 1
	*e++ = PSH;            // Push i onto stack
	
	// 3: r = 1;
	*e++ = IMM; *e++ = 1;  // r = 1
	*e++ = PSH;            // Push r onto stack
	
	// 4: i = 1;
	*e++ = IMM; *e++ = 1;  // i = 1
	*e++ = PSH;            // Push i onto stack
	
	// 5: while (i <= n) {
	*e++ = LLA; *e++ = 3;  // Load i
	*e++ = LI;             // Load i's value
	*e++ = PSH;            // Push i onto stack
	*e++ = LLA; *e++ = 2;  // Load n
	*e++ = LI;             // Load n's value
	*e++ = LEV;            // Compare i <= n
	*e++ = BZ; loc = e; *e++ = 0;  // Branch to exit if i > n
	
	// 6: r = r * 2;
	*e++ = LLA; *e++ = 1;  // Load r
	*e++ = LI;             // Load r's value
	*e++ = PSH;            // Push r onto stack
	*e++ = IMM; *e++ = 2;  // Load constant 2
	*e++ = MUL;            // r = r * 2
	
	// 7: i++;
	*e++ = LLA; *e++ = 3;  // Load i
	*e++ = LI;             // Load i's value
	*e++ = IMM; *e++ = 1;  // Load constant 1
	*e++ = ADD;            // i = i + 1
	*e++ = PSH;            // Push updated i onto stack
	
	// 8: }
	*e++ = LEV;            // End of function, exit loop
	
	// 9: return r;
	*e++ = LLA; *e++ = 1;  // Load r
	*e++ = LI;             // Load r's value
	*e++ = PSH;            // Push r onto stack
	*e++ = PRTF;           // Print r value
	*e++ = ADJ; *e++ = 1;  // Adjust stack and return
	
	// 10: int main() {
	pc = e;
	*e++ = ENT; *e++ = 0;
	
	// 11: printf("power2(3)=%d\n", power2(3));
	*e++ = IMM; *e++ = (int) "power2(3)=%d\n"; // load the format string
	*e++ = PSH;
	*e++ = IMM; *e++ = 3;  // load the argument 3 for power2
	*e++ = PSH;
	*e++ = JSR; *e++ = (int) e;  // jump to power2 function
	*e++ = ADJ; *e++ = 1;
	*e++ = PRTF;   // print the result
	*e++ = ADJ; *e++ = 2; // Adjust the stack after the function call
	
	// 12: }
	*e++ = LEV;  // End of main function
	
	  // setup stack
	  bp = sp = (int *)((int)sp + poolsz);
	  *--sp = EXIT; // call exit if main returns
	  *--sp = PSH; t = sp;
	  *--sp = (int)t;
	  return run(pc, bp, sp);
	}